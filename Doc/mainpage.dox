/**
@mainpage The CosmoBolognaLib documentation

Here you can find the full documentation of the @b CosmoBolognaLib, a
large set of @e free @e software C++ libraries for cosmological
calculations. Among many other things, these libraries can be used to
measure the two-point and three-point correlation functions, and to
model redshift-space distortions and baryon acoustic oscillations.

Please have a look at the example codes in CosmoBolognaLib/Examples/
that show how to use the CosmoBolognaLib in either @b C++ or @b Python
codes.

If you use the CosmoBolognaLib, please reference the code paper: @b
CosmoBolognaLib: @b C++ @b libraries @b for @b cosmological @b
calculations http://arxiv.org/abs/1511.00012

The specific tools to analyse cosmic void catalogues are presented in
https://arxiv.org/abs/1703.07848

These are the scientific publications that used the CosmoBolognaLib:
<a
href="https://ui.adsabs.harvard.edu/abs/2016A%26C....14...35M/citations">publications
I</a> and <a href="../../Doc/papers.txt">publications II</a>

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------

Author and BDFL:
  - @b Federico @b Marulli (federico.marulli3@unibo.it)

Main contributors:
  - Sofia Contarini (voids, python, CBL logo, etc.)
  - Giorgio Lesci (cluster number counts, weak-lensing profiles,
    super-sample covariance, conda virtual environment, CAMB wrapper, etc.)
  - Michele Moresco (three-point correlation)
  - Alfonso Veropalumbo (two-point angular correlation, clustering
    wedges, jackknife and bootstrap, lognormal mocks, BAO modelling,
    MCMC, three-point correlation modelling, etc.)

Other contributors:
  - Carlo Cannarozzo (void detection)
  - Cosimo Fedeli (non-Gaussian cosmologies)
  - Giovanni Gandolfi (HOD modelling)
  - Jorge Enrique GarcÃ­a-Farieta (two-point correlation modelling)
  - Carlo Giocoli (mass accretion history)
  - Jacopo Neri (mass function)
  - Davide Pelliciari (probe combination)
  - Massimiliano Romanello (angular clustering)
  - Mauro Roncarelli (fast comoving distance estimator) 
  - Tommaso Ronconi (void number counts)
  - Simone Sartori (void detection)
  - Luca Stabellini (HOD)
  - Alessandro Benati, Elena Sarpa, Akke Viitanen (code validation)


-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------


A @b configured @b virtual @b development @b environment to use the
CosmoBolognaLib is available here:
\n
https://apps.difa.unibo.it/files/people/Str957-cluster/astro/CosmoBolognaLib_VM/Ubuntu_CBL.ova
\n the password is: ilovecbl

Alternatively, to @b install @b the @b CosmoBolognaLib on a custom
Unix/Mac distribution, please follow the instructions below:

first, make sure that the following external libraries are present in your system:
- GSL (GNU Scientific Library) (v2.1 is required)
- FFTW (Fastest Fourier Transform in the West)
- OpenMP (Open Multiprocessing)
- CFITSIO
- Boost

if the paths of these libraries are not the default ones, then they
have to be added to the LD_LIBRARY_PATH environment variable (e.g.
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/your_path)

the FFTW have to be compiled as shared libraries and using OpenMP
compiler directives (e.g. on Unix systems: ./configure --enable-shared
--enable-openmp)

then:

  - download the CosmobolognaLib:

either, clone the public GitLab repository of the CosmobolognaLib
with:

> <KBD> $ git clone git\@gitlab.com:/federicomarulli/CosmoBolognaLib </KBD> 

or, alternatively, download the unzip the CosmoBolognaLib-master.zip archive
at https://gitlab.com/federicomarulli/CosmoBolognaLib/archive/master.zip

  - enter the folder CosmoBolognaLib/ and type:
    
> <KBD> $ make </KBD> 
    
by default, make will compile the full set of libraries using the GNU
project g++ compile (>=v11.2.0 is required); both the compiler and the
compilation flags can be specified by modifying the variables C and
FLAGS defined in the Makefile (e.g.: make C=icpc FLAGS="-O0 -g")

  - other Makefile options are:

> <KBD> $ make lib* </KBD> [ ---> compile the * library (e.g. make libFUNC will compile the library libFUNC.so) ]

> <KBD> $ make python </KBD> [ ---> compile the Python wrappers (SWIG
  >=v3.0.7 is required); in this case, CosmoBolognaLib/Python/ has to be added in PYTHONPATH (e.g. in .bashrc add the following line: export PYTHONPATH=$PYTHONPATH:/path_to/CosmoBolognaLib/Python/); to specify a different python version set the PY variable (e.g. make python PY=python2) ]

> <KBD> $ make cleanpy </KBD> [ ---> remove the Python wrappers ]
    
> <KBD> $ make allExamples </KBD> [ ---> compile all the C++ example codes ]

> <KBD> $ make cleanExamples </KBD>  [ ---> remove all the object files of the examples ]

> <KBD> $ make documentation </KBD> [ ---> create the documentation (Doxygen is required) ]

> <KBD> $ make clean </KBD> [ ---> cleanExamples + remove all the object files of the libraries ]

> <KBD> $ make purge </KBD> [ ---> make clean + remove all the library files (i.e. *.so) ]

> <KBD> $ make purgeALL </KBD>  [---> make purge + make cleanpy + remove all the files stored for internal calculations ]
   
  - optionally, the following external softwares used by the CosmoBolognaLib can be compiled with the following commands:

> <KBD> $ make CUBA </KBD>

> <KBD> $ make CCfits </KBD>

> <KBD> $ make CAMB </KBD> 

> <KBD> $ make CLASS </KBD> 

> <KBD> $ make MPTbreeze </KBD> 

> <KBD> $ make mangle </KBD>

It is also possible to create a @b conda @b environment for the CosmoBolognaLib, called "cbl".
\n In `CosmoBolognaLib/`, run

> <KBD> $ conda env create -f environment.yml </KBD>

> <KBD> $ conda activate cbl </KBD>

In order to compile the CosmoBolognaLib in the conda environment, run

> <KBD> $ python environment_compile.py </KBD>

To run e.g. `make clean` in the conda environment, run

> <KBD> $ python environment_compile.py clean </KBD>

In order to compile scripts that include CosmoBolognaLib, it is necessary to specify the library path for the compiler.
\n
For example, in Ubuntu add the following line to the `.bashrc` file:

> <KBD> export LD_LIBRARY_PATH=/path/to/CosmoBolognaLib/ </KBD>

Then, to compile for example a script named `script.cpp`, run

> <KBD> $ make script CXX=$GXX HOME=$CONDA_PREFIX </KBD>

*/
	
